/*
Define a Product class with the fields name and price (double), along with specific methods.
The application features a GUI based on a Frame with two buttons (ReadFile and MaxPrice), a TextArea, and a label.
When the ReadFile button is pressed:
It reads pairs of string–double values from a file. These values are used to create Product objects. Exceptions related to missing or incorrectly typed values on a line are caught and displayed in the label.
Each object is added to a list that is sorted alphabetically by product name, and the products are displayed line by line in the TextArea. Each press changes the text color randomly.
When the MaxPrice button is pressed, the highest price is shown in the label.
*/


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import javax.swing.*;

class Produs implements Comparable<Produs>{
	private String denumire;
	private double pret;
	
	public Produs(String denumire, double pret) {
		this.denumire = denumire;
		this.pret = pret;
	}
	
	public String getDenumire() {
		return denumire;
	}
	
	public double getPret() {
		return pret;
	}

	@Override
	public int compareTo(Produs other) {
		return this.denumire.compareTo(other.denumire);
	}
	
	public String toString() {
		return denumire + ": " + pret;
		
	}
}

class MyJFrame extends JFrame{	
	
	private JPanel PanouPrincipal;
	private JButton CitireFisier, PretMax;
	private JTextArea textArea;
	private JLabel eticheta;
	private List<Produs> produse;
	
	public MyJFrame(String s) {
		super(s);
		produse = new ArrayList<>(); // Inițializare lista produse
		
		CitireFisier = new JButton("CitireFisier");
		PretMax = new JButton("PretMax");
		textArea = new JTextArea();
		eticheta = new JLabel();
		
		textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);
		
		CitireFisier.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				CitireFisier();
				
			}
		});
		
		PretMax.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				PretMax();
				
			}
		});
		
		
		PanouPrincipal = new JPanel();
		PanouPrincipal.add(CitireFisier);
		PanouPrincipal.add(PretMax);
		PanouPrincipal.add(textArea);
		PanouPrincipal.add(eticheta);
		
		this.add(PanouPrincipal);
		this.setSize(500,400);
		this.setVisible(true);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	public void CitireFisier() {
		JFileChooser fileChooser = new JFileChooser();
		int result = fileChooser.showOpenDialog(this);
		if (result == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			try(BufferedReader br = new BufferedReader(new FileReader(file))){
				String line;
				while((line = br.readLine())!=null) {
					String[] parts = line.split(" ");
					if (parts.length < 2) {
						eticheta.setText("Linie incorectă în fișier: " + line);
						continue;
					}
					try {
						String denumire = parts[0];
						double pret = Double.parseDouble(parts[1]);
						produse.add(new Produs(denumire, pret));
					}catch (NumberFormatException e) {
						eticheta.setText("Preț invalid în linie: " + line);
					}
                }
                Collections.sort(produse);
                textArea.setText("");
                Random random = new Random();
                for (Produs p : produse) {
                    textArea.setForeground(new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256)));
                    textArea.append(p.toString() + "\n");
                }
            } catch (IOException ex) {
                eticheta.setText("Eroare la citirea fișierului: " + ex.getMessage());
            }
        }
    }
	
	private void PretMax() {
        if (produse.isEmpty()) {
            eticheta.setText("Nu există produse.");
            return;
        }
        double maxPret = Double.MIN_VALUE;
        for (Produs p : produse) {
            if (p.getPret() > maxPret) {
                maxPret = p.getPret();
            }
        }
        eticheta.setText("Prețul maxim: " + maxPret);
    }
}


public class Examen {

	public static void main(String[] args) {
		MyJFrame frame = new MyJFrame("Problema");

	}

}
