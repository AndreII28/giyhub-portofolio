/*
The program reads a matrix from a file and performs several operations:
Checks that all elements are non-zero and negative.
Displays the matrix on the screen.
Calculates and prints the sum of the elements in the third column.
Copies the matrix into another dynamically allocated matrix.
Writes to a new file the decimal parts of all matrix elements.
Memory for the matrices is dynamically allocated and properly deallocated after use.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void citirematrice(FILE*, float**, int, int);
void afisare(float**, int, int);
void VerificareDiferitDeZero(float**, int, int);
void VerificareNrNegative(float**, int, int);
void suma(float**, int, int);
void copiereMatrice(float**, float**, int, int);
void Scriere(FILE*, float**, int, int);

int main() {
	FILE* fp;
	char NumeFsier1[] = "D:\\ExamenC\\Matrice.txt";
	fp = fopen(NumeFsier1, "r");
	float** mat1,**mat2 ;
	
	FILE* EX;
	char NumeFisier2[] = "D:\\ExamenC\\MatriceRezultata.txt";
	EX = fopen(NumeFisier2, "w");

	int m,n, i, j;
	fscanf(fp, "%d", &m);
	printf("%d\n", m);

	fscanf(fp, "%d", &n);
	printf("%d\n", n);

	if ((mat1 = (float**)malloc(m * sizeof(float)))) {
		for (i = 0; i < m; i++) {
			mat1[i] = (float*)malloc(n * sizeof(float));
			if (mat1[i] == 0) {
				printf("\nEroare de alocare !");
				return 0;
			}
		}
	}
	citirematrice(fp, mat1, m,n);
	fclose(fp);

	VerificareDiferitDeZero(mat1, m, n);
	VerificareNrNegative(mat1, m, n);
	afisare(mat1, m,n);
	suma(mat1, m, n);
	//verificare(mat1, m, n);

	if ((mat2 = (float**)malloc(m * sizeof(float)))) {
		for (i = 0; i < m; i++) {
			mat2[i] = (float*)malloc(n * sizeof(float));
			if (mat2[i] == 0) {
				printf("\nEroare de alocare !");
				return 0;
			}
		}
	}
	copiereMatrice(mat1, mat2, m, n);
	//afisare(mat2, m, n);

	Scriere(EX, mat1, m, n);
	// Dealocare
	if (mat1) {
		for (i = 0; i < m; i++)
			free(mat1[i]);
		free(mat1);
	}
	if (mat2) {
		for (i = 0; i < m; i++)
			free(mat2[i]);
		free(mat2);
	}
	//fclose(EX);
	return 0;

}


void citirematrice(FILE* fp, float** mat1, int m, int n) {
	int i, j;
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			fscanf(fp, "%f", &mat1[i][j]);
		}

	}
}

void afisare(float** mat1, int m, int n) {
	int i, j;
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(" %.2f ", mat1[i][j]);
		}
		printf("\n");

	}
}

void VerificareDiferitDeZero(float** mat1, int m, int n) {
	int i, j;
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			if (int(mat1[i][j]) <= 0) {
				printf("Elementele matrici Nu sunt diferite de 0 !\n");
				exit(0);
			}
		}
	}
	printf("\nToate elementele din matrice au partea zecimala diferita de 0\n");
}

void VerificareNrNegative(float** mat1, int m, int n) {
	int i, j;
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			if (!((mat1[i][j]) < 0)) {
				//printf("Matricea contine elemente negative !\n");
				exit(0);
			}
		}
	}
	printf("Matricea contine elemente negative !\n");
}

void suma(float** mat1, int m, int n) {
	int i, j;
	float sum = 0;
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			if (j == 2) {
				//printf("%.2f\n", mat1[i][j]);
				sum += mat1[i][j];
			}
		}
	}
	printf("Suma elementelor de pe coloana 3: %.2f\n", sum);
}


void copiereMatrice(float** mat1, float** mat2, int m, int n) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			mat2[i][j] = mat1[i][j];
		}
	}
}

void Scriere(FILE* EX, float** mat1, int m, int n) {
	int i, j;
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			fprintf(EX, " %.2f ", mat1[i][j]-int(mat1[i][j]));
		}
		fprintf(EX, "\n");

	}
}
