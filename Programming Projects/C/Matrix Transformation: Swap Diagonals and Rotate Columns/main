/*
A program that reads integer elements of an n x n matrix (with n <= 5) from the keyboard using a function. Implement a function to swap the main diagonal with the secondary diagonal, 
and then a function to rotate the matrix to the right by k columns (where k is read from the keyboard and validated). Display the initial matrix and the matrix after each operation using a dedicated function.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

//Antet functii
void citireMat(int**, int);
void copiereMatrice(int**, int**, int);
void AfisareMatrice(int** mat, int);
void SchimbareDiagonala(int**, int);
void RotireDreapta(int**, int, int );

int main() {
	int i, j, n;
	int** mat1, **mat2, **mat3; //Pointer la matrici
	printf("Introduceti dimensiunea matrici: ");
	scanf("%d", &n);
	if (n <= 0 || n > 5) {
		printf("Dimensiunea matrici nu este corespunzatoare!");
		return 0;
	}
	int k;
	printf("Introduceti numarul de coloane cu care sa se roteasca matricea la dreapta: ");
	scanf("%d", &k);
	if (k > n) {
		printf("Numarul introdus nu corespunde cu numarul de coloane a matrici!");
		return 0;
	}

	//Creare Mat1
	if ((mat1 = (int**)malloc(n * sizeof(int)))) {
		for (i = 0; i < n; i++) {
			mat1[i] = (int*)malloc(n * sizeof(int));
			if (mat1[i] == 0) {
				printf("\nEroare de alocare !");
				return 0;
			}
		}
	}
	//Citire Mat1
	citireMat(mat1, n);


	//Creare Mat2 schimbare diagonala cu diagonala secundara
	if ((mat2 = (int**)malloc(n * sizeof(int)))) {
		for (i = 0; i < n; i++) {
			mat2[i] = (int*)malloc(n * sizeof(int));
			if (mat2[i] == 0) {
				printf("\nEroare de alocare !");
				return 0;
			}
		}
	}

	copiereMatrice(mat1, mat2, n);
	SchimbareDiagonala(mat2, n);
	
	//Creare Mat3 
	if ((mat3 = (int**)malloc(n * sizeof(int)))) {
		for (i = 0; i < n; i++) {
			mat3[i] = (int*)malloc(n * sizeof(int));
			if (mat3[i] == 0) {
				printf("\nEroare de alocare !");
				return 0;
			}
		}
	}
	copiereMatrice(mat1, mat3, n);
	RotireDreapta(mat3, n, k);

	//Afisare Matrici
	printf("\nMatricea initiala arata astfel:");
	AfisareMatrice(mat1, n);
	//Afisare Matrici schimbate
	printf("\nMatricea dupa schimbarea diagonalelor arata astfel:");
	AfisareMatrice(mat2, n);
	//Afisare Matrici 3
	printf("\nMatricea dupa rotirea la dreapta arata astfel:");
	AfisareMatrice(mat3, n);


	// Dealocare
	if (mat1) {
		for (i = 0; i < n; i++)
			free(mat1[i]);
		free(mat1);
	}
	if (mat2) {
		for (i = 0; i < n; i++)
			free(mat2[i]);
		free(mat2);
	}
	if (mat3) {
		for (i = 0; i < n; i++)
			free(mat3[i]);
		free(mat3);
	}
	return 0;

}

void citireMat(int** mat1, int n) {
	printf("\nIntroduceti elementele matrici: \n");
	int i, j;
	for (i = 0; i < n; i++) {
		printf("Linia %d: ", i + 1);
		for (j = 0; j < n; j++) {
			scanf("%d", &mat1[i][j]);
		}
	}
}

void copiereMatrice(int** mat1, int** mat2, int n) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			mat2[i][j] = mat1[i][j];
		}
	}
}

void AfisareMatrice(int** mat, int n) {
	for (int i = 0; i < n; i++) {
		printf("\n\t");
		for (int j = 0; j < n; j++) {
			printf(" %d", mat[i][j]);
		}
	}
	printf("\n");
}
void SchimbareDiagonala(int** mat2, int n) {
	for (int i = 0; i < n; i++) {
		// Schimba elementul de pe diagonala principala cu cel de pe diagonala secundara
		int temp = mat2[i][i];
		mat2[i][i] = mat2[i][n - i - 1];
		mat2[i][n - i - 1] = temp;
	}
}

void RotireDreapta(int** mat3, int n, int k) {
	int temp, k_mod = k % n; // Pentru a gestiona cazurile unde k > n
	for (int r = 0; r < k_mod; r++) { // Rotește matricea cu o coloană de k ori
		for (int i = 0; i < n; i++) { // Iterează prin fiecare rând
			temp = mat3[i][n - 1]; // Salvează ultima coloană pentru fiecare rând
			for (int j = n - 1; j > 0; j--) { // Muta coloanele cu o poziție la dreapta
				mat3[i][j] = mat3[i][j - 1];
			}
			mat3[i][0] = temp; // Plasează valoarea salvată în prima coloană
		}
	}
}
